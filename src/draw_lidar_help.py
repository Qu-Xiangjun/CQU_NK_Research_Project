"""
此文件负责画出雷达图，包含函数draw_lidar()
"""
import math
import numpy as np
import cv2
import random
import matplotlib.pyplot as plt
import threading


class draw_lidar_help(threading.Thread):
    def __init__(self, lidar_data_list):
        threading.Thread.__init__(self)
        self.lidar_data_list = lidar_data_list

    def run(self):
        '''
        根据雷达数据，用cv2画出雷达图
        lidar_data_list: 输入的雷达数据
        注意：lidar_data_list为全局数据，此是为了方便使用线程概念让图像一直在绘制
        '''
        while(True):
            if(self.lidar_data_list == None):
                return
            # 建立二维直角坐标系 ，起始角度为 -45°
            # 注意图像的（0,0）在左上角
            graph = np.zeros((500, 500, 3), np.uint8)
            angle = -48.42+90  # +90为将图像顺时针转动90°
            for radius in self.lidar_data_list:  # 遍历半径
                radius = radius*0.1/2  # 换为0.5cm为单位
                Abscissa = int(math.cos(angle*math.pi/180) * radius)  # 横坐标
                Ordinate = int(math.sin(angle*math.pi/180) * radius)  # 纵坐标
                angle -= 0.18
                if(abs(int(Abscissa)) >= 250 or abs(int(Ordinate)) >= 250):  # 超出地图5m
                    continue
                print((Abscissa, Ordinate))
                # 用CV2画线，中心位置在(250,250),和目标点，颜色是(255,0,0),线宽1
                cv2.line(graph, (250, 250), (Abscissa+250,
                                             Ordinate+250), (255, 0, 0), 1)
                # cv2.circle(graph, (300, 300), 2, (255, 255, 0))
                cv2.imshow('graph', graph)
            cv2.waitKey(1)


# lidar_data_list = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
# 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 1980, 2007, 2028, 2068, 2086, 2092, 2116, 2158, 2190, 2225, 2260, 2287, 2319, 2365, 2365, 2365, 2365, 2365, 2365, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 2788, 3277, 3239, 3280, 3282, 3282, 3282, 3277, 3275, 3270, 3271, 3269, 3268, 3272, 3276, 3274, 3277, 3270, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 3273, 2626, 2621, 2594, 2586, 2586, 2586, 2586, 2586, 2531, 2540, 2536, 2529, 2529, 2536, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2017, 2017, 2017, 2017, 1776, 1766, 1768, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 993, 999, 1003, 1003, 1003, 1003, 1003, 1003, 884, 872, 872, 872, 872, 872, 872, 716, 707, 710, 710, 705, 705, 708, 709, 711, 704, 706, 716, 728, 728, 728, 728,
# 673, 663, 662, 663, 667, 657, 653, 657, 660, 661, 661, 661, 661, 623, 609, 605, 603, 599, 598, 588, 586, 586, 586, 586, 586, 495, 503, 507, 506, 497, 495, 487, 483, 485, 480, 467, 462, 456, 451, 454, 448, 434, 431, 425, 416, 411, 425, 421, 426, 417, 417, 417, 417, 380, 380, 376, 379, 379, 374, 378, 374, 374, 371, 368, 369, 369, 369, 370, 372, 369, 377, 374, 378, 375, 373, 376, 388, 394, 382, 382, 382, 382, 404, 418, 411, 417, 413, 414, 418, 415, 418, 413, 419, 426, 424, 425, 425, 428, 425, 425, 424, 430, 431, 431, 432, 438, 433, 439, 438, 435, 441, 440, 442, 446, 452, 453, 445, 447, 448, 454, 453, 458, 451, 457, 455, 459, 455, 463, 466, 467, 469, 471, 470, 469, 466, 469, 470, 467, 474, 480, 476, 476, 476, 476, 476, 403, 390, 377, 375, 375, 378, 385, 384, 384, 379, 385, 385, 385, 385, 385, 385, 385, 385, 494, 499, 500, 500, 507, 508,
# 507, 510, 513, 510, 514, 516, 519, 517, 517, 522, 525, 523, 526, 528, 529, 536, 537, 534, 533, 537, 540, 542, 537, 547, 545, 547, 551, 551, 553, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 1134, 1138, 1136, 1134, 1138, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 511, 507, 508, 506, 512, 517, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 758, 759, 764, 766, 770, 769, 766, 771, 771, 763, 769, 770, 766, 768, 760, 762, 762, 762, 762, 794, 780, 787, 783, 780, 778, 786, 770, 779, 765, 770, 768, 755, 780, 780, 778, 782, 780, 780, 775, 769, 764, 760, 765, 761, 758, 764, 768, 744, 752, 753, 757, 764, 762, 764, 764, 779, 776, 780, 790, 792, 801, 805, 805, 810, 805, 810, 813, 812, 826, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 818, 1454, 1457, 1475, 1477, 1477, 1477, 1477, 1477, 1477, 2125, 2124, 2124, 2124, 2124, 2124, 1613, 1611, 1606, 1598, 1591, 1583, 1575, 1577, 1565, 1559, 1542, 1531, 1530, 1530, 1527, 1527, 1525, 1528, 1530, 1532, 1529, 1527, 1532, 1534, 1537, 1536, 1532, 1532, 1538, 1533, 1538, 1539, 1534, 1537, 1541, 1547, 1545, 1552, 1552, 1552, 1552, 1552, 1552, 1351, 1333, 1353, 1353, 1353, 1353, 2071, 2074, 2074, 2066, 2069, 2065, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2065, 2065, 2060, 2058, 2060, 2064, 2060, 2060, 2065, 2064, 2059, 2058, 2058, 2056, 2062, 2066, 2060, 2063, 2057, 2063, 2069, 2062, 2064, 2067, 2063, 2064, 2059, 2059, 2052, 2058, 2059, 2060, 2060, 2060, 2056, 2066, 2066, 2061, 2066, 2067, 2066, 2068, 2071, 2067, 2058, 2069, 2066, 2068, 2070, 2071, 2072, 2073, 2069, 2068, 2064, 2069, 2069, 2064, 2068, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
# 2071, 2071, 2071, 2081, 2084, 2087, 2086, 2080, 2084, 2087, 2092, 2091, 2092, 2093, 2099, 2098, 2103, 2104, 2105, 2109, 2108, 2110, 2112, 2104, 2096, 2061, 2053, 2028, 2035, 2024, 2042, 2029, 2084, 2084, 2084, 2084, 1960, 1908, 1905, 1913, 1924, 1932, 1923, 1940, 1935, 1931, 1950, 1950, 1950, 1950, 1950, 1950, 1488, 1484, 1488, 1486, 1486, 1464, 1456, 1442, 1427, 1432, 1420, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1341, 1299, 1275, 1259, 1258, 1259, 1256, 1269, 1282, 1305, 1337, 1355, 1361, 1366, 1364, 1360, 1364, 1373, 1372, 1372, 1370, 1374, 1374, 1374, 1374, 1374, 1117, 1119, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1404, 1406, 1406, 1406, 1406, 1406, 1406, 935, 931, 936, 944, 938, 939, 930, 929, 922, 916, 906, 897, 894, 889, 890, 882, 892, 890, 894, 907, 900, 877, 862, 856, 843, 817, 823, 816, 826, 826, 829, 837, 834, 838, 839, 842, 839, 842, 843, 836, 843, 843, 835, 828, 828, 818, 822, 817, 812, 809, 803, 799, 799, 790, 787, 788, 782, 770, 766, 762, 758, 766, 766, 764, 764, 764, 763, 768, 770, 777, 777, 781, 780, 786, 784, 787, 779, 790, 793, 791, 795, 804, 799, 805, 814, 816, 813, 809, 818, 832, 831, 845, 849, 860, 849,
# 848, 856, 854, 853, 856, 847, 849, 849, 843, 841, 833, 841, 834, 828, 829, 826, 827, 823, 817, 817, 817, 815, 812, 812, 812, 802, 803, 804, 802, 799, 797, 798, 795, 798, 794, 792, 784, 786, 789, 784, 784, 788, 790, 790, 796, 802, 804, 802, 810, 809, 814, 824, 827, 826, 831, 836, 843, 841, 852, 852, 860, 860, 866, 866, 867, 877, 884, 892, 888, 899, 904, 914, 920, 920, 931, 935, 933, 933, 928, 930, 930, 919, 924, 923, 920, 914, 917, 915, 911, 912, 902, 902, 903, 907, 896, 896, 896, 896, 896, 562, 551, 542, 527, 519, 512, 513, 509, 517, 509, 509, 513, 514, 517, 518, 532, 546, 546, 546, 546, 546, 863, 871, 861, 857, 858, 857, 858, 857, 857, 849, 857, 851, 851, 851, 847, 846, 853, 847, 844, 847, 846, 847, 844, 839, 831, 840, 839, 835, 837, 844, 842, 832, 832, 823, 806, 794, 799, 798, 790, 786, 787, 800, 792, 806, 820, 815, 824, 818, 818,
# 818, 818, 732, 713, 707, 695, 688, 689, 682, 683, 676, 684, 685, 681, 675, 678, 680, 674, 676, 674, 673, 668, 670, 652, 659, 658, 655, 656, 664, 665, 667, 670, 671, 668, 668, 673, 674, 676, 677, 669, 669, 674, 674, 677, 677, 681, 682, 684, 687, 687, 695, 696, 706, 715, 715, 715, 715, 791, 793, 795, 790, 801, 796, 801, 793, 792, 797, 796, 797, 798, 793, 795, 796, 797, 796, 793, 797, 798, 800, 800, 805, 803, 800, 795, 801, 801, 795, 797, 796, 797, 796, 802, 800, 807, 800, 800, 803, 803, 803, 805, 805, 807, 801, 809, 807, 806, 809, 806, 810, 806, 811, 800, 808, 809, 809, 811, 810, 807, 805, 805, 804, 812, 814, 806, 809, 808, 812, 816, 808, 816, 811, 811, 807, 813, 812, 813, 808, 812, 798, 798, 787, 797, 784, 781, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785,
# 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 826, 824, 825, 829, 831, 832, 837, 836, 837, 841, 850, 841, 846, 851, 851, 851, 850, 869, 852, 854, 853, 859, 869, 873, 859, 863, 878, 866, 885, 878, 870, 885, 883, 886, 888, 887, 892, 890, 891, 894, 894, 900, 904, 897, 899, 903, 899, 905, 907, 910, 913, 910, 919, 921, 916, 921, 921, 926, 925, 930, 925, 930, 931, 934, 936, 939, 943, 941, 938, 941, 947, 949, 947, 950, 949, 952, 947, 957, 961, 959, 965, 960, 969, 970, 972, 968, 971, 971, 973, 972, 982, 973, 977, 982, 984, 994, 996, 999, 1004, 1000, 1008, 1008, 1000, 1012, 1008, 1016, 1022, 1018, 1022, 1019, 1013, 1011, 999, 999, 1004, 1015, 1022, 1033, 1029, 1021, 1021, 1019, 1011, 1001, 1000, 997, 991, 992, 985, 983, 978, 963, 953, 949, 936, 932, 941, 943, 949, 956, 953, 959, 946,
# 947, 947, 948, 942, 944, 938, 929, 927, 929, 921, 918, 922, 913, 914, 912, 907, 912, 903, 897, 896, 888, 888, 889, 892, 886, 889, 882, 878, 876, 871, 880, 875, 872, 863, 864, 862, 863, 859, 862, 858, 856, 850, 836, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827, 827]
# for i in range(len(lidar_data_list)):
#     lidar_data_list[i] = int(lidar_data_list[i])
# print(lidar_data_list)

# while(1):
#     random.shuffle(lidar_data_list)

#     # 建立二维直角坐标系 ，起始角度为 -45°
#     # 注意图像的（0,0）在左上角
#     graph = np.zeros((500, 500,3), np.uint8)
#     angle = -48.42+90 # +90为将图像顺时针转动90°
#     for radius in lidar_data_list: # 遍历半径
#         radius = radius*0.1/2 # 换为0.5cm为单位
#         Abscissa = int(math.cos(angle*math.pi/180) * radius) # 横坐标
#         Ordinate = int(math.sin(angle*math.pi/180) * radius) # 纵坐标
#         angle -= 0.18
#         if(abs(int(Abscissa))>=250 or abs(int(Ordinate))>=250): # 超出地图5m
#             continue
#         print((Abscissa,Ordinate))
#         # 用CV2画线，中心位置在(250,250),和目标点，颜色是(255,0,0),线宽1
#         cv2.line(graph,(250, 250),(Abscissa+250,Ordinate+250),(255,0,0),1)
#         # cv2.circle(graph, (300, 300), 2, (255, 255, 0))
#         cv2.imshow('graph',graph)
#     cv2.waitKey(1)
